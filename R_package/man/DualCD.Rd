% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/DualCD.R
\name{DualCD}
\alias{DualCD}
\title{Coordinate descent algorithm for solving the dual form of our debiasing program.}
\usage{
DualCD(
  X,
  x,
  theta_hat = NULL,
  alpha_hat = NULL,
  gamma_n = 0.05,
  intercept = TRUE,
  ll_init = NULL,
  eps = 1e-09,
  max_iter = 5000
)
}
\arguments{
\item{X}{The input design n*d matrix.}

\item{x}{The current query point, which is a 1*d array.}

\item{gamma_n}{The regularization parameter "\eqn{\gamma/n}". (Default: gamma_n=0.05.)}

\item{ll_init}{The initial value of the dual solution vector. (Default: ll_init=NULL. Then, the vector with all-one entries is used.)}

\item{eps}{The tolerance value for convergence. (Default: eps=1e-9.)}

\item{max_iter}{The maximum number of coordinate descent iterations. (Default: max_iter=5000.)}

\item{theta.hat}{The Lasso pilot estimator of high-dimensional logistic regression, which as a 1*d array}
}
\value{
The solution vector to our dual debiasing program.
}
\description{
This function implements the coordinate descent algorithm for the debiasing
dual program. More details can be found in Appendix A of our paper.
}
\examples{
\donttest{
  require(MASS)
  require(glmnet)
  d = 1000
  n = 900

  Sigma = array(0, dim = c(d,d)) + diag(d)
  rho = 0.1
  for(i in 1:(d-1)){
    for(j in (i+1):d){
      if ((j < i+6) | (j > i+d-6)){
        Sigma[i,j] = rho
        Sigma[j,i] = rho
      }
    }
  }

  ## Current query point
  x_cur = rep(0, d)
  x_cur[c(1, 2, 3, 7, 8)] = c(1, 1/2, 1/4, 1/2, 1/8)
  x_cur = array(x_cur, dim = c(1,d))

  ## True regression coefficient
  s_theta = 5
  theta_0 = rep(0, d)
  theta_0[1:s_theta] = sqrt(5)

  ## Generate the design matrix and outcomes
  X_sim = mvrnorm(n, mu = rep(0, d), Sigma)
  Y_sim = rbinom(n,size=1,prob=plogis(X_sim \%*\% theta_0 + alpha_0))

  ## Estimate the coefficient and intercept with logistic regression with L-1 penalty
  lr1 = cv.glmnet(X_sim, Y_sim, family = binomial(link='logit'), alpha = 1, type.measure = 'deviance',
                  standardize = F, intercept = T, nfolds = 5)
  lasso_pilot = glmnet(X_sim, Y_sim, family = binomial(link = 'logit'), alpha = 1, lambda = lr1$lambda.min,
                      standardize = F, intercept = T)
  theta_hat = coef(lasso_pilot)[-1]
  alpha_hat = coef(lasso_pilot)[1]

  ## Solve the dual weights
  deb_res = DualCD(X_sim, x_cur, theta_hat, alpha_hat, gamma_n=0.1)
}

}
\author{
Wenjie Guan, \email{wg285@cornell.edu}
}
\keyword{internal}
